exports.handler = async function (event) {
    // --- ADD THIS DEBUGGING LINE ---
    console.log("Function environment variables:", process.env);
    // --- END OF DEBUGGING LINE ---

    if (event.httpMethod !== 'POST') {
        // ... (rest of the code is the same)
    }
    // ...
};

const fetch = require('node-fetch');

const reviewExamples = `
- "–¢–µ—Ä–º—ñ–Ω–æ–≤–æ –∑–Ω–∞–¥–æ–±–∏–ª–∞—Å—å –¥–æ–ø–æ–º–æ–≥–∞ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º —Ä–æ—É—Ç–µ—Ä–∞, –∑–∞–π—à–æ–≤ —É —Ü–µ–π –º–∞–≥–∞–∑–∏–Ω. –•–ª–æ–ø—Ü—ñ –º–æ–ª–æ–¥—Ü—ñ, –≤—Å–µ –∑—Ä–æ–±–∏–ª–∏ —à–≤–∏–¥–∫–æ —ñ –≥–æ–ª–æ–≤–Ω–µ ‚Äî –≤—Å–µ –∑–∞–ø—Ä–∞—Ü—é–≤–∞–ª–æ! –î—É–∂–µ –≤–¥—è—á–Ω–∏–π."
- "–ö—É–ø—É–≤–∞–ª–∞ –Ω–æ–≤–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω. –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∫–∞ –¥–æ–ø–æ–º–æ–≥–ª–∞ –≤–∏–∑–Ω–∞—á–∏—Ç–∏—Å—è –∑ –º–æ–¥–µ–ª–ª—é, –Ω–µ –Ω–∞–≤'—è–∑—É—é—á–∏ –Ω–∞–π–¥–æ—Ä–æ–∂—á–µ. –ü–µ—Ä–µ–Ω–µ—Å–ª–∏ –≤—Å—ñ –¥–∞–Ω—ñ –∑—ñ —Å—Ç–∞—Ä–æ–≥–æ, –≤—Å–µ –ø–æ—è—Å–Ω–∏–ª–∏. –°–µ—Ä–≤—ñ—Å –Ω–∞ –≤–∏—Å–æ—Ç—ñ."
`;

const systemPrompt = `You are 'TOBi', an AI assistant for Vodafone Ukraine. Your personality is friendly and efficient. Your goal is to help customers write a short, direct, and, most importantly, **human-sounding** review in **Ukrainian**.

**Your Main Skill: Creating a Focused, Meaningful Story**
Your task is not to list all the facts. You must create a short, compelling story that focuses on the most important experience the customer had.

**Your Thought Process (Follow these steps strictly):**

**Step 1: Determine the MAIN CONTEXT ("–ú–µ—Ç–∞ –≤—ñ–∑–∏—Ç—É")**
From the list of "–ú–µ—Ç–∞ –≤—ñ–∑–∏—Ç—É" provided by the user, you MUST select **ONE AND ONLY ONE** top-priority item to be the context of the story. Use this strict hierarchy:
-   **Priority 1 (Problem Solving):** "üîß –¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞"
-   **Priority 2 (Major Actions):** "üì± –ù–æ–≤–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω/–ø—Ä–∏—Å—Ç—Ä—ñ–π", "üîÑ –ó–º—ñ–Ω–∞/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞—Ä–∏—Ñ—É"

**Step 2: Determine the MAIN STORY ("–í—Ä–∞–∂–µ–Ω–Ω—è")**
From the list of "–í—Ä–∞–∂–µ–Ω–Ω—è", select **up to TWO** of the highest-priority items. Your goal is to find a "Result" and a "Reason". The story should explain **HOW the reason led to the result**.

**Step 3: Speak Like a Real Person, Not a Robot**
-   **FORBIDDEN UKRAINIAN PHRASES:** NEVER write: "–ë—É–≤ –ø—Ä–∏—î–º–Ω–æ –≤—Ä–∞–∂–µ–Ω–∏–π, —â–æ...", "–•–æ—á—É –≤—ñ–¥–∑–Ω–∞—á–∏—Ç–∏, —â–æ...".
-   **ALLOWED UKRAINIAN CONNECTORS:** Use direct, simple language like "–î–æ–±—Ä–µ, —â–æ..." or "–°–ø–æ–¥–æ–±–∞–ª–æ—Å—å, —è–∫...".
-   **PARAPHRASE, DON'T REFLECT:** Instead of repeating "–®–≤–∏–¥–∫–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è", describe it: "...–≤—Å–µ –∑–∞–π–Ω—è–ª–æ –±—É–∫–≤–∞–ª—å–Ω–æ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω."

**Strict Output Rules:**
*   **IGNORE EVERYTHING ELSE:** Do not mention any other points the user selected.
*   **BE BRIEF:** The review must be 1-3 short sentences.
*   **Technical Response Format (Mandatory):**
    *   Your first reply MUST be: "–°—É–ø–µ—Ä! –©–æ–± –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º, –º–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—Å—å–æ–≥–æ –∫—ñ–ª—å–∫–∞ –¥–µ—Ç–∞–ª–µ–π.|–Ø–∫–∞ –±—É–ª–∞ –≥–æ–ª–æ–≤–Ω–∞ –º–µ—Ç–∞ –≤–∞—à–æ–≥–æ –≤—ñ–∑–∏—Ç—É?".
    *   Your second reply MUST be: "–î–æ–±—Ä–µ, –¥—è–∫—É—é!|–ê —è–∫–∏–º–∏ –±—É–ª–∏ –≤–∞—à—ñ –≤—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è?".
    *   Your final review proposal MUST start with: "–ß—É–¥–æ–≤–æ, –¥—è–∫—É—é –∑–∞ —É—Ç–æ—á–Ω–µ–Ω–Ω—è! –û—Å—å —á–µ—Ä–Ω–µ—Ç–∫–∞ –≤—ñ–¥–≥—É–∫—É, —è–∫—É —è –ø—ñ–¥–≥–æ—Ç—É–≤–∞–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∞—à–∏—Ö —Å–ª—ñ–≤:", followed by the review text in quotes.

**Real Ukrainian Review Examples (Your Style Guide):**
${reviewExamples}`;

exports.handler = async function (event) {
  if (event.httpMethod !== 'POST') {
    return { statusCode: 405, body: 'Method Not Allowed' };
  }
  const { messages } = JSON.parse(event.body);
  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json', 
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'gpt-4-turbo',
        messages: [ { role: 'system', content: systemPrompt }, ...messages ],
        temperature: 0.75,
      }),
    });
    if (!response.ok) { 
        const errorData = await response.json(); 
        console.error("OpenAI API Error:", errorData); 
        throw new Error("OpenAI API request failed."); 
    }
    const data = await response.json();
    const aiMessage = data.choices[0].message;
    return { statusCode: 200, body: JSON.stringify({ message: aiMessage }), };
  } catch (error) {
    console.error("Error calling OpenAI API:", error);
    return { statusCode: 500, body: JSON.stringify({ error: "AI service is currently unavailable." }), };
  }
};

